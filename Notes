Framework:-
   - framework is a platform for developing software applications.
   It already have predefined classes functions that can be used to process input,
   manage hardware devices and interact with System software.

----------------------------------


Django:-
    -  Django is an extremely popular and fully featured server-side web framework, written in Python.
    It provides a set of tools and functionalities that solves many problems associated with web
    development such as user sign up, Authorization ,Database Access security features, template design,
    URL Mapping and much more. Django helps us to develop secure and reliable web application in
    quick and standardized way without having to reinvent the wheel.


------------------------------------

Django Installation:-
    - pip install django

------------------------------------

Project Creation:-
    - In Django, a "project" is a collection of configurations and applications that together
    make up a web application or a website.

    Command :- django-admin startproject <project_name>

-------------------------------------

Change Dir:-
    - cd <dir_name>

-----------------------------------

App Creation:-
    - App is a Web application that does something. An app usually is composed of a set of models
    (database tables), views, templates, tests.

    Command :- python manage.py startapp <app1>

-----------------------------------

App Confiq:
    Open sub project -> settings.py -> INSTALLED_APPS ['add_app_name']

------------------------------------

Run Command:-
    - python manage.py runserver

-----------------------------------

DJANGO MVC - MVT Pattern:
    The Model-View-Template (MVT) is slightly different from MVC. In fact the
    main difference between the two patterns is that Django itself takes care
    of the Controller part (Software Code that controls the interactions
    between the Model and View), leaving us with the template. The template
    is a HTML file mixed with Django Template Language (DTL).

    Model: Handles data access, manipulation, and validation.
    View: Processes requests, retrieves data from models, and sends data to templates for rendering.
    Template: Renders HTML with dynamic content using data provided by views.

---------------------------------------------

Template:-
    - In Django, templates are HTML files that allow you to add dynamic content to your website.
    They help separate the design (HTML) from the logic (Python code).

    Configuration:  Project -> Settings -> Template (list) -> DIRS : [os.path.join(BASE_DIR, 'Template')]

--------------------------------------------

Static:-
    - In django the  additional files such as images, JavaScript, or CSS refer to as â€œstatic files".

    Configuration: Project -> Settings -> scroll down -> static option ->
                    STATIC_DIR = os.path.join(BASE_DIR, 'static')
                    STATICFILES_DIRS = [STATIC_DIR,]

--------------------------------------------

Models:-
    - A model is a class that represents table or collection in our DB, and
      where every attribute of the class is a field of the table or collection.

      python manage.py makemigrations
      python manage.py migrate

---------------------------------------------

Admin Panal:
    * Admin panal user creation:-
          - python manage.py createsuperuser

          user: admin123
          email: skip
          password: *****
          re-password: *****

          than run.
-------------------------------------------------

Forms:-
   -  forms.py is a common convention used to store and organize form classes for your web application.
      Forms in Django are used to handle user input and validate data before it is processed.
      They are typically defined in a forms.py file within your Django app.

----------------------------------------------------

